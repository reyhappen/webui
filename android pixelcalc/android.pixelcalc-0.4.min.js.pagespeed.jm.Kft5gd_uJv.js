jQuery.fn.mousehold = function(k, l) {
	k && "function" == typeof k && (l = k, k = 100);
	if (l && "function" == typeof l) {
		var p = 0,
			g = 0;
		return this.each(function() {
			jQuery(this).mousedown(function() {
				g = 1;
				var n = 0,
					a = this;
				p = setInterval(function() {
					n++;
					l.call(a, n);
					g = 2
				}, k)
			});
			clearMousehold = function() {
				clearInterval(p);
				1 == g && l.call(this, 1);
				g = 0
			};
			jQuery(this).mouseout(clearMousehold);
			jQuery(this).mouseup(clearMousehold)
		})
	}
};
$(function() {
	function k(c) {
		return !isNaN(parseFloat(c)) && isFinite(c)
	}

	function l() {
		"" == b && (b = 0);
		var c = 0,
			d = 0;
		"px" == a && (c = unitjson.px.val = b);
		"mm" == a && (unitjson.mm.val = b, c = b * f / 25.4);
		"dp" == a && (unitjson.dp.val = b, c = f / 160 * b);
		"sp" == a && (unitjson.sp.val = b, c = f / 160 * b);
		"pt" == a && (unitjson.pt.val = b, c = b / 72 * f);
		"in" == a && (unitjson["in"].val = b, c = b / .03937007874 * f / 25.4);
		"px" != a && (unitjson.px.val = c.toFixed());
		"mm" != a && (d = 25.4 * c / f, 0 != d % 1 && (d = d.toFixed(3)), unitjson.mm.val = d);
		"dp" != a && (d = 160 / f * c, 0 != d % 1 && (d = d.toFixed(3)), unitjson.dp.val = d);
		"sp" != a && (d = 160 / f * c, 0 != d % 1 && (d = d.toFixed()), unitjson.sp.val = d);
		"pt" != a && (d = 72 * c / f, 0 != d % 1 && (d = d.toFixed()), unitjson.pt.val = d);
		"in" != a && (d = 25.4 * c / f * .03937007874, 0 != d % 1 && (d = d.toFixed(3)), unitjson["in"].val = d)
	}

	function p() {
		$(".g-dp").html(unitjson.dp.val);
		$(".g-sp").html(unitjson.sp.val);
		$(".g-px").html(unitjson.px.val);
		$(".g-mm").html(unitjson.mm.val);
		$(".g-pt").html(unitjson.pt.val);
		$(".g-in").html(unitjson["in"].val)
	}

	function g() {
		var c = $("#" + m).val(),
			d = m.split("-"),
			b = 0,
			e = 0,
			a = 0;
		for (a in h) "px" == d[1] ? b = c : "mm" == d[1] ? b = c * h[a] / 25.4 : "dp" == d[1] ? b = h[a] / 160 * c : "pt" == d[1] ? b = c / 72 * h[a] : "in" == d[1] && (b = c / .03937007874 * h[a] / 25.4), a + "-px" != m && (e = b, 0 != e % 1 && (e = e.toFixed()), q[a + "-px"] = e), a + "-mm" != m && (e = 25.4 * b / h[a], 0 != e % 1 && (e = e.toFixed(3)), q[a + "-mm"] = e), a + "-dp" != m && (e = 160 / h[a] * b, 0 != e % 1 && (e = e.toFixed(3)), q[a + "-dp"] = e), a + "-pt" != m && (e = 72 * b / h[a], 0 != e % 1 && (e = e.toFixed()), q[a + "-pt"] = e), a + "-in" != m && (e = 25.4 * b / h[a] * .03937007874, 0 != e % 1 && (e = e.toFixed(3)), q[a + "-in"] = e)
	}

	function n() {
		for (x in q) x != m && $("#" + x).val(q[x])
	}
	unitjson = {
		dp: {
			val: 0,
			title: "dp - Density-independent Pixels",
			desc: "dp is abstract unit which is based on the physical density of the screen. It keeps exact dimensions allowing some physical size variation depending on device density(dpi).",
			desc2: '<br/>\t dp = px * (160/dpi) <br/> units are relative to a 160 assumed "medium" baseline density. <br/> px is scaled up when device running on higher density screen'
		},
		sp: {
			val: 0,
			title: "sp - Scale-independent Pixels",
			desc: "sp is same as dp unit, but it scaled depands by the <b>user's font</b> size preference.<br/>go Settings (Phone) > Accessibility to check user's font size <br/>",
			desc2: " "
		},
		px: {
			val: 0,
			title: "px - Pixels",
			desc: "pixel is a single dot in the screen.<br/> The counts of pixels in screen area define as dpi (dots per inch). <br/> 120 dpi is equivalent to total pixel count in one inch",
			desc2: " <br/> pixel unit is not recommended to use because it can vary across devices. defferent devices may have a different number of pixels per inch."
		},
		mm: {
			val: 0,
			title: "mm - Millimeters",
			desc: "unit of measurement based on the physical size of the screen",
			desc2: "mm = inches / 25.4"
		},
		pt: {
			val: 0,
			title: "pt - Points",
			desc: "pt is exactly the same physical size on every density, which is 72(more accurately 72.27) points per inch. <br/> Android converts pt to px using the exact dpi of the device's screen.",
			desc2: "pt = in / 72 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(in to pt)<br/> pt = px * 72 / dpi &nbsp;&nbsp;&nbsp;(px to pt)"
		},
		"in": {
			val: 0,
			title: "in - Inches",
			desc: "unit of measurement based on the physical size of the screen",
			desc2: "inch = mm * 25.4"
		}
	};
	var a = "in",
		f = 120,
		b = 1,
		q = {
			"ldpi-dp": 0,
			"ldpi-px": 0,
			"ldpi-in": 1,
			"ldpi-pt": 0,
			"ldpi-mm": 0,
			"mdpi-dp": 0,
			"mdpi-px": 0,
			"mdpi-in": 0,
			"mdpi-pt": 0,
			"mdpi-mm": 0,
			"tvdpi-dp": 0,
			"tvdpi-px": 0,
			"tvdpi-in": 0,
			"tvdpi-pt": 0,
			"tvdpi-mm": 0,
			"hdpi-dp": 0,
			"hdpi-px": 0,
			"hdpi-in": 0,
			"hdpi-pt": 0,
			"hdpi-mm": 0,
			"xdpi-dp": 0,
			"xdpi-px": 0,
			"xdpi-in": 0,
			"xdpi-pt": 0,
			"xdpi-mm": 0,
			"xxdpi-dp": 0,
			"xxdpi-px": 0,
			"xxdpi-in": 0,
			"xxdpi-pt": 0,
			"xxdpi-mm": 0,
			"xxxhdpi-dp": 0,
			"xxxhdpi-px": 0,
			"xxxhdpi-in": 0,
			"xxxhdpi-pt": 0,
			"xxxhdpi-mm": 0,
			"cust-dp": 0,
			"cust-px": 0,
			"cust-in": 0,
			"cust-pt": 0,
			"cust-mm": 0
		},
		h = {
			ldpi: 120,
			mdpi: 160,
			tvdpi: 213,
			hdpi: 240,
			xdpi: 320,
			xxdpi: 480,
			xxxhdpi: 640,
			cust: 72
		},
		m = "ldpi-in";
	$(".select-calc span").on("click", function() {
		$(this).hasClass("selected") || ($(".select-calc span").removeClass("selected"), $(this).addClass("selected"))
	});
	$("#hexselect").on("click", function() {
		$("table.hex").show();
		$("table.multi").hide()
	});
	$("#multiselect").on("click", function() {
		$("table.hex").hide();
		$("table.multi").show()
	});
	$("#unittxt").on("keyup", function() {
		b = $(this).val();
		l();
		p()
	});
	$(".grid").on("click", function() {
		$(".grid-active").removeClass("grid-active");
		$(this).addClass("grid-active");
		a = $(this).find("h2").html();
		$("#unitname").html(a);
		txtval = unitjson[a].val;
		title = unitjson[a].title;
		desc = unitjson[a].desc;
		desc2 = unitjson[a].desc2;
		$("#unittitle").html(title);
		$("#unitdesc").html(desc);
		$("#unitdesc2").html(desc2);
		$("#unittxt").val(txtval)
	});
	$("#dpidd").on("change", function() {
		f = $(this).val();
		b = $("#unittxt").val();
		"custom" == f ? ($("#customdpi").show(), f = $("#customdpi").val(), "" == f && (f = 0)) : $("#customdpi").hide();
		l();
		p()
	});
	$("#customdpi").on("keyup", function() {
		f = $(this).val();
		"" == f && (f = 0);
		l();
		p()
	});
	$("#morebtn").mousehold(function(c) {
		b = $("#unittxt").val();
		k(b) && (b++, $("#unittxt").val(b), l(), p())
	});
	$("#lessbtn").mousehold(function(c) {
		b = $("#unittxt").val();
		k(b) && (b--, $("#unittxt").val(b), l(), p())
	});
	l();
	p();
	$("#reset-multigrid").click(function() {
		m = "ldpi-in";
		q["ldpi-in"] = "1";
		$("#ldpi-in").val(1);
		h.cust = 72;
		g();
		n()
	});
	$(".grid-2 .morebtn").mousehold(function(c) {
		c = $(this).parent().parent().children("input");
		var a = c.val();
		m = c.attr("data-id");
		k(a) && (a++, c.val(a), g(), n())
	});
	$(".grid-2 .lessbtn").mousehold(function(c) {
		c = $(this).parent().parent().children("input");
		var a = c.val();
		m = c.attr("data-id");
		k(a) && (a--, c.val(a), g(), n())
	});
	$(".grid-2 input").on("keyup", function() {
		m = $(this).attr("data-id");
		g();
		n()
	});
	$("#advmoredpi").mousehold(function(a) {
		a = $("#cust-dpi").val();
		k(a) && (a++, h.cust = a, $("#cust-dpi").val(a), g(), n())
	});
	$("#advlessdpi").mousehold(function(a) {
		a = $("#cust-dpi").val();
		k(a) && (a--, h.cust = a, $("#cust-dpi").val(a), g(), n())
	});
	$("#cust-dpi").on("keyup", function() {
		h.cust = $(this).val();
		g();
		n()
	});
	g();
	n()
});