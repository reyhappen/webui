$(function() {
	function P(b, d, a) {
		radius = zm = 1;
		a = Math.abs((360 - a) * (Math.PI / 180));
		var c = b / 2,
			e = d / 2;
		parseInt(b) > parseInt(d) ? (radius = e, zm = b / d * Math.abs(Math.cos(a)) + Math.abs(Math.sin(a))) : (radius = c, zm = Math.abs(Math.cos(a)) + d / b * Math.abs(Math.sin(a)));
		x = radius * Math.cos(a);
		y = radius * Math.sin(a);
		px1 = c + x;
		py1 = e + y;
		px2 = c - x;
		py2 = e - y;
		return {
			x0: px2,
			y0: py2,
			x1: px1,
			y1: py1,
			zoom: zm
		}
	}

	function t(b) {
		return parseInt(b.substr(1, 2), 16)
	}

	function u(b) {
		return parseInt(b.substr(3, 2), 16)
	}

	function v(b) {
		return parseInt(b.substr(5, 2), 16)
	}

	function I(b) {
		b = parseInt(b, 10);
		if (isNaN(b)) return "00";
		b = Math.max(0, Math.min(b, 255));
		return "0123456789ABCDEF".charAt((b - b % 16) / 16) + "0123456789ABCDEF".charAt(b % 16)
	}

	function C(b, d, a) {
		var c = "";
		$.each(b, function(a, b) {
			rgba = "rgba(" + t(b.color) + "," + u(b.color) + "," + v(b.color) + "," + b.alpha / 100 + ")";
			0 == a ? (ie_hex_first = b.color, c += rgba + " " + b.position + "%") : c += ", " + rgba + " " + b.position + "%"
		});
		"r" == d ? returnstr = "background: -moz-radial-gradient(center, ellipse cover, " + c + "); background: -webkit-radial-gradient(center, ellipse cover, " + c + "); background: -o-radial-gradient(center, ellipse cover, " + c + "); background: -ms-radial-gradient(center, ellipse cover, " + c + "); background: radial-gradient(ellipse at center, " + c + "); " : (w3cdeg = Math.abs(a - 450) % 360, returnstr = "background: -moz-linear-gradient(" + a + "deg, " + c + " )background: -webkit-linear-gradient(" + a + "deg, " + c + "); background: -o-linear-gradient(" + a + "deg, " + c + "); background: -ms-linear-gradient(" + a + "deg, " + c + "); background: linear-gradient(" + w3cdeg + "deg, " + c + "); ");
		return returnstr
	}

	function Q(b, d) {
		for (j = 0; j < b.length; j++)
			if (b[j][0] == d) return temp = j, !0;
		return !1
	}

	function q() {
		layerStopper = [];
		tmp_g_stoper_t = [].concat(h);
		tmp_g_stoper_b = [].concat(g);
		len_t = tmp_g_stoper_t.length;
		len_b = tmp_g_stoper_b.length;
		tmp_g_stoper_t.sort(function(b, d) {
			return b[0] - d[0]
		});
		tmp_g_stoper_b.sort(function(b, d) {
			return b[0] - d[0]
		});
		g_arr = [];
		i = len_t - 1;
		do g_arr.push([tmp_g_stoper_t[i][0], null, tmp_g_stoper_t[i][1]]); while (i--);
		i = len_b - 1;
		do Q(g_arr, tmp_g_stoper_b[i][0]) ? g_arr[temp][1] = tmp_g_stoper_b[i][1] : g_arr.push([tmp_g_stoper_b[i][0], tmp_g_stoper_b[i][1], null]); while (i--);
		g_arr.sort(function(b, d) {
			return b[0] - d[0]
		});
		len = g_arr.length;
		for (i = 0; i < len; i++) layerStopper.push({
			position: g_arr[i][0],
			color: g_arr[i][1],
			alpha: g_arr[i][2]
		});
		e.multilayer[f].stopper = layerStopper;
		n()
	}

	function B(b) {
		var d = 0,
			a, c = [];
		for (a in b) d++;
		d -= 1;
		c = $.extend(!0, {}, b);
		if (null == c[0].color)
			for (a = 1; a <= d; a++)
				if (null != c[a].color) {
					c[0].color = c[a].color;
					break
				}
		if (null == c[d].color)
			for (a = d - 1; 0 <= a; a--)
				if (null != c[a].color) {
					c[d].color = c[a].color;
					break
				}
		if (null == c[0].alpha)
			for (a = 1; a <= d; a++)
				if (null != c[a].alpha) {
					c[0].alpha = c[a].alpha;
					break
				}
		if (null == c[d].alpha)
			for (a = d - 1; 0 <= a; a--)
				if (null != c[a].alpha) {
					c[d].alpha = c[a].alpha;
					break
				}
		for (a = 0; a <= d; a++) {
			if (null == c[a].color) {
				for (j = a; j < d && null == c[j].color; j++);
				calc = (c[a].position - c[a - 1].position) / (c[j].position - c[a - 1].position);
				fix_stopper_r = t(c[a - 1].color) + (t(c[j].color) - t(c[a - 1].color)) * calc;
				fix_stopper_g = u(c[a - 1].color) + (u(c[j].color) - u(c[a - 1].color)) * calc;
				fix_stopper_b = v(c[a - 1].color) + (v(c[j].color) - v(c[a - 1].color)) * calc;
				c[a].color = "#" + (I(fix_stopper_r) + I(fix_stopper_g) + I(fix_stopper_b))
			}
			if (null == c[a].alpha) {
				for (j = a; j < d && null == c[j].alpha; j++);
				calc = (c[j].alpha - c[a - 1].alpha) * ((c[a].position - c[a - 1].position) / (c[a + 1].position - c[a - 1].position));
				c[a].alpha = parseInt(c[a - 1].alpha) + parseInt(calc)
			}
		}
		return c
	}

	function r(b) {
		layer = b.split("|");
		datalayer = {
			multilayer: []
		};
		i = 0;
		for (l = layer.length; i < l; i++) {
			l_split = layer[i].split("&");
			l_color = l_split[0].split(",");
			l_alpha = l_split[1].split(",");
			l_type = l_split[2].split("_");
			b = [];
			j = 0;
			for (lj = l_color.length; j < lj; j++) lc_split = l_color[j].split("_"), b.push({
				position: lc_split[0],
				color: "#" + lc_split[1],
				alpha: null
			});
			j = 0;
			for (lj = l_alpha.length; j < lj; j++) {
				lc_split = l_alpha[j].split("_");
				position_exist = !1;
				for (k = 0; k < b.length; k++)
					if (b[k].position == lc_split[0]) {
						b[k].alpha = lc_split[1];
						position_exist = !0;
						break
					}!1 == position_exist && b.push({
					position: lc_split[0],
					color: null,
					alpha: lc_split[1]
				})
			}
			b.sort(function(b, a) {
				return b.position - a.position
			});
			datalayer.multilayer.push({
				type: l_type[0],
				deg: l_type[1],
				stopper: b
			})
		}
		layerjs = JSON.stringify(datalayer);
		$g_l_preset = $("<div class='g_l_preset' data-layer='" + layerjs + "' ></div>");
		i = 0;
		for (l = datalayer.multilayer.length; i < l; i++) fixstopper = B(datalayer.multilayer[i].stopper), bgcss = C(fixstopper, datalayer.multilayer[i].type, datalayer.multilayer[i].deg), s_bg_inele = '<div style="' + bgcss + '"></div>', $g_l_preset.prepend(s_bg_inele);
		$multigrad_preset.append($g_l_preset)
	}

	function p() {
		fixstopper = B(e.multilayer[f].stopper);
		bgcss = C(fixstopper, e.multilayer[f].type, e.multilayer[f].deg);
		s_bg_inele = '<div style="' + bgcss + ';height:100%"></div>';
		$p_col.html(s_bg_inele);
		bgcss = C(fixstopper, "l", 0);
		s_bg_inele = '<div style="' + bgcss + ';height:100%"></div>';
		$s_bg.html(s_bg_inele);
		s_bg_inele = '<div class="g_layer_bgt"><div class="g_layer_bg" style="' + bgcss + ';"></div></div>';
		$g_layer_cont.find(".selected").html(s_bg_inele)
	}

	function n() {
		$("#css_prev").empty();
		$.each(e.multilayer, function(b, d) {
			fixstopper = B(d.stopper);
			bgcss = C(fixstopper, d.type, d.deg);
			var a = '<div style="' + bgcss + ';height:100%;width:100%;position:absolute"></div>';
			$("#css_prev").prepend(a)
		})
	}

	function D() {
		fixstopper = B(e.multilayer[f].stopper);
		$cs_t.empty();
		$cs_b.empty();
		h = [];
		g = [];
		$.each(e.multilayer[f].stopper, function(b, d) {
			if (null != d.alpha) {
				var a = 3.6 * d.position - 5,
					c = $(document.createElement("div")).addClass("cs_tpt"),
					e = $(document.createElement("div")).css({
						opacity: d.alpha / 100
					});
				c.css("left", a + "px").append(e);
				$cs_t.append(c);
				h.push([d.position, d.alpha])
			}
			null != d.color && (a = 3.6 * d.position - 5, c = $(document.createElement("div")).addClass("cs_bpt"), e = $(document.createElement("div")).css({
				"background-color": d.color
			}), c.css("left", a + "px").append(e), $cs_b.append(c), g.push([d.position, d.color]))
		});
		$img_orientation.val(e.multilayer[f].type);
		"l" == e.multilayer[f].type ? $img_angle.prop("disabled", !1).val(e.multilayer[f].deg) : $img_angle.prop("disabled", !0).val(e.multilayer[f].deg);
		$.each(e.multilayer[f].stopper, function(b, d) {
			if (null != d.alpha) return $t_alpha.val(d.alpha), $t_loc.val(d.position), !1
		});
		$.each(e.multilayer[f].stopper, function(b, d) {
			if (null != d.color) return $b_col.spectrum("set", d.color), $b_loc.val(d.position), !1
		});
		$(".cs_tpt").first().addClass("active");
		$(".cs_bpt").first().addClass("active");
		s = z = 0;
		p();
		t_len = $(".cs_tpt").length;
		2 < t_len ? $alpha_delete.removeAttr("disabled") : $alpha_delete.attr("disabled", "disabled");
		b_len = $(".cs_bpt").length;
		2 < b_len ? $color_delete.removeAttr("disabled") : $color_delete.attr("disabled", "disabled");
		n()
	}

	function M() {
		len_t = h.length;
		$(".cs_tpt").remove();
		for (i = 0; i < len_t; i++) z == i ? ($t_loc.val(h[i][0]), $t_alpha.val(h[i][1]), temp = 3.6 * h[i][0] - 5, opacity = h[i][1] / 100, addelement = "<div class='cs_tpt active' style='left:" + temp + "px' ><div style='background-color:black;opacity:" + opacity + ";filter:alpha(opacity=" + h[i][1] + ")'></div></div>") : (temp = 3.6 * h[i][0] - 5, opacity = h[i][1] / 100, addelement = "<div class='cs_tpt' style='left:" + temp + "px' ><div style='background-color:black;opacity:" + opacity + ";filter:alpha(opacity=" + h[i][1] + ")'></div></div>"), $(".cs_t").append(addelement)
	}

	function N() {
		len_b = g.length;
		$(".cs_bpt").remove();
		for (i = 0; i < len_b; i++) i == s ? ($b_loc.val(g[i][0]), $b_col.spectrum("set", g[i][1]), temp = 3.6 * g[i][0] - 5, addelement = "<div class='cs_bpt active' style='left:" + temp + "px' ><div style='background-color:" + g[i][1] + "'></div></div>") : (temp = 3.6 * g[i][0] - 5, addelement = "<div class='cs_bpt' style='left:" + temp + "px' ><div style='background-color:" + g[i][1] + "'></div></div>"), $(".cs_b").append(addelement)
	}

	function F() {
		$g_layer_cont.html("");
		$.each(e.multilayer, function(b, d) {
			fixnullstopper = B(d.stopper);
			bgcss = C(fixnullstopper, "l", 0);
			var a = $(document.createElement("div")).addClass("g_layer").html('<div class="g_layer_bgt" ><div class="g_layer_bg" style="' + bgcss + '"></div></div>');
			b == f && a.addClass("selected");
			$g_layer_cont.append(a)
		});
		O(f)
	}

	function O(b) {
		totallayer = $g_layer_cont.find(".g_layer").length;
		$g_layer_up.removeAttr("disabled");
		$g_layer_down.removeAttr("disabled");
		$g_layer_del.removeAttr("disabled");
		1 == totallayer ? ($g_layer_up.attr("disabled", "disabled"), $g_layer_down.attr("disabled", "disabled"), $g_layer_del.attr("disabled", "disabled")) : 1 < totallayer && (0 == b ? $g_layer_up.attr("disabled", "disabled") : b + 1 == totallayer && $g_layer_down.attr("disabled", "disabled"))
	}
	$g_layer_cont = $("#g_layer_cont");
	$g_layer_new = $("#g_layer_new");
	$g_layer_up = $("#g_layer_up");
	$g_layer_down = $("#g_layer_down");
	$g_layer_del = $("#g_layer_del");
	$multigrad_preset = $("#g_layer_preset");
	$gradient = $("#gradient");
	$cs_t = $("#cs_t");
	$s_bg = $("#s_bg");
	$cs_b = $("#cs_b");
	$g_box = $("#g_box");
	$p_col = $("#p_col");
	$img_orientation = $("#img_orientation");
	$img_angle = $("#img_angle");
	$t_alpha = $("#t_alpha");
	$t_loc = $("#t_loc");
	$b_col = $("#b_col");
	$b_loc = $("#b_loc");
	$alpha_delete = $(".alpha_delete");
	$color_delete = $(".color_delete");
	var A = 0,
		m = $cs_t.offset(),
		w = $("#s_bg").offset(),
		e = {},
		f = 0,
		h = [],
		g = [],
		z = 0,
		s = 0,
		G = 0,
		J = !1,
		H = 0,
		K = !1,
		E = !0,
		m = {
			l: w.left,
			w: w.left + 360
		},
		L = {
			data: "",
			type: "png"
		};
	$(document).mousemove(function(b) {
		A = b.pageX;
		J && (w = $("#s_bg").offset(), m.l = w.left, m.w = w.left + 360, G = A - 5, m.l > A && (G = m.l - 5), m.w < A && (G = m.w - 5), $(".cs_t .active").offset({
			left: G
		}), l = $(".cs_t .active").css("left"), pos = Number(l.slice(0, -2)) + 5, pos = Math.round(100 * (pos / 360)), h[z][0] = pos, $t_loc.val(pos), q(), p(), n());
		K && (w = $("#s_bg").offset(), m.l = w.left, m.w = w.left + 360, H = A - 5, m.l > A && (H = m.l - 5), m.w < A && (H = m.w - 5), $(".cs_b .active").offset({
			left: H
		}), l = $(".cs_b .active").css("left"), pos = Number(l.slice(0, -2)) + 5, pos = Math.round(100 * (pos / 360)), g[s][0] = pos, $b_loc.val(pos), q(), p(), n())
	});
	$(document).mouseup(function() {
		K = J = !1
	});
	$("#generateimg_btn").click(function() {
		$("#loading").show();
		divlayer = imgcsscode = "";
		img_width = $("#img_width").val();
		img_height = $("#img_height").val();
		var b = document.createElement("canvas");
		b.width = img_width;
		b.height = img_height;
		var d = b.getContext("2d");
		i = e.multilayer.length - 1;
		len = e.multilayer.length;
		do {
			if ("l" == e.multilayer[i].type) {
				var a = B(e.multilayer[i].stopper),
					c = P(img_width, img_height, e.multilayer[i].deg);
				grad = d.createLinearGradient(c.x0, c.y0, c.x1, c.y1);
				for (j in a) rgbastr = "rgba(" + t(a[j].color) + "," + u(a[j].color) + "," + v(a[j].color) + "," + a[j].alpha / 100 + ")", grad.addColorStop(a[j].position / 100, rgbastr);
				d.fillStyle = grad;
				xsc = ysc = c.zoom;
				xmin = xsc * img_width / 2 - img_width / 2;
				ymin = ysc * img_height / 2 - img_height / 2;
				d.setTransform(xsc, 0, 0, ysc, -xmin, -ymin);
				d.fillRect(0, 0, img_width, img_height);
				rgbastr = "";
				for (j in a) rgbastr = 0 == j ? rgbastr + ("rgba(" + t(a[j].color) + "," + u(a[j].color) + "," + v(a[j].color) + "," + a[j].alpha / 100 + ") " + a[j].position + "%") : rgbastr + (", rgba(" + t(a[j].color) + "," + u(a[j].color) + "," + v(a[j].color) + "," + a[j].alpha / 100 + ") " + a[j].position + "%");
				w3cdeg = Math.abs(e.multilayer[i].deg - 450) % 360;
				imgcsscode += "<div> .layer-" + (len - i) + "{ <div style='margin-left:15px' > background: -moz-linear-gradient(" + e.multilayer[i].deg + "deg, " + rgbastr + "); </div><div style='margin-left:15px' > background: -webkit-linear-gradient(" + e.multilayer[i].deg + "deg, " + rgbastr + "); </div><div style='margin-left:15px' > background: -o-linear-gradient(" + e.multilayer[i].deg + "deg, " + rgbastr + "); </div><div style='margin-left:15px' > background: -ms-linear-gradient(" + e.multilayer[i].deg + "deg, " + rgbastr + "); </div><div style='margin-left:15px' > background: linear-gradient(" + w3cdeg + "deg, " + rgbastr + "); </div> } </div> "
			} else {
				var a = B(e.multilayer[i].stopper),
					f = invScaleY = c = scaleY = 1,
					g = img_width / Math.sqrt(2),
					h = img_height / Math.sqrt(2),
					m = img_width / 2,
					n = img_height / 2,
					g = 0 == g ? 0.25 : g,
					h = 0 == h ? 0.25 : h;
				g >= h ? (f = c = 1, scaleY = h / g, invScaleY = g / h, grad = d.createRadialGradient(m, n * invScaleY, 0, m, n * invScaleY, g)) : (invScaleY = scaleY = 1, c = g / h, f = h / g, grad = d.createRadialGradient(m * f, n, 0, m * f, n, h));
				for (j in a) rgbastr = "rgba(" + t(a[j].color) + "," + u(a[j].color) + "," + v(a[j].color) + "," + a[j].alpha / 100 + ")", grad.addColorStop(a[j].position / 100, rgbastr);
				d.fillStyle = grad;
				d.setTransform(c, 0, 0, scaleY, 0, 0);
				d.fillRect(0, 0, img_width * f, img_height * invScaleY);
				rgbastr = "";
				for (j in a) rgbastr = 0 == j ? rgbastr + ("rgba(" + t(a[j].color) + "," + u(a[j].color) + "," + v(a[j].color) + "," + a[j].alpha / 100 + ") " + a[j].position + "%") : rgbastr + (", rgba(" + t(a[j].color) + "," + u(a[j].color) + "," + v(a[j].color) + "," + a[j].alpha / 100 + ") " + a[j].position + "%");
				imgcsscode += "<div> .layer-" + (len - i) + "{ <div style='margin-left:15px' > background: -moz-radial-gradient(center, ellipse cover, " + rgbastr + "); </div><div style='margin-left:15px' > background: -webkit-radial-gradient(center, ellipse cover, " + rgbastr + "); </div><div style='margin-left:15px' > background: -o-radial-gradient(center, ellipse cover, " + rgbastr + "); </div><div style='margin-left:15px' > background: -ms-radial-gradient(center, ellipse cover, " + rgbastr + "); </div><div style='margin-left:15px' > background: radial-gradient(ellipse at center, " + rgbastr + "); </div> } </div> "
			}
			divlayer = "&lt;div class='layer-" + (i + 1) + "' &gt; <div style='margin-left:10px;'>" + divlayer + "</div> &lt;/div&gt;"
		} while (i--);
		L.data = b.toDataURL("image/png");
		imgcsscode = "<div> &lt;style&gt; <br/> div { width:100%; height:100%; } <br/>.layer-1 { width:" + img_width + "px; height:" + img_height + "px; }" + imgcsscode + " <br/> &lt;/style&gt; </div>";
		$("#generateimg_btn").prop("disabled", !0);
		$("#loading").hide();
		$("#base64code").val(L.data);
		$("#csscode").html(imgcsscode + "<br/>" + divlayer);
		$("#results").html('<img name="gradient" src="' + L.data + '"/>');
		/*$("#download_btn").attr({
			href: "./download.php?file=" + a
		}).show();*/
		$("#generateimg_btn").prop("disabled", !1);
		$("html, body").animate({
			scrollTop: 600
		}, 600)
	});
	$("#uniquelink").hover(function() {
		exporturl = "";
		$.each(e.multilayer, function(b, d) {
			layercolor = layeralpha = "";
			$.each(d.stopper, function(a, b) {
				null != b.color && (layercolor += b.position + "_" + b.color.substring(1) + ",");
				null != b.alpha && (layeralpha += b.position + "_" + b.alpha + ",")
			});
			exporturl += layercolor.substring(0, layercolor.length - 1) + "&" + layeralpha.substring(0, layeralpha.length - 1) + "&" + d.type + "_" + d.deg + "|"
		});
		exporturl = "?" + exporturl.substring(0, exporturl.length - 1);
		$(this).attr("href", exporturl)
	});
	$img_orientation.change(function() {
		k = $(this).val();
		e.multilayer[f].type = k;
		"r" == k ? $img_angle.prop("disabled", !0) : $img_angle.prop("disabled", !1);
		p();
		n()
	});
	$img_angle.change(function() {
		k = $(this).val();
		e.multilayer[f].deg = k;
		p();
		n()
	});
	$(".cs_t").on("mouseout", ".cs_tpt", function() {
		E = !0
	}).on("mouseover", ".cs_tpt", function() {
		E = !1
	}).on("mousedown", ".cs_tpt", function() {
		$(".cs_tpt").removeClass("active");
		$(this).addClass("active");
		var b = $("div", this).css("opacity");
		$t_alpha.val(100 * b);
		l = $(this).css("left");
		z = $(".cs_tpt").index(this);
		pos = Number(l.slice(0, -2)) + 5;
		pos = Math.round(100 * (pos / 360));
		$t_loc.val(pos)
	});
	$(".cs_b").on("mouseout", ".cs_bpt", function() {
		E = !0
	}).on("mouseover", ".cs_bpt", function() {
		E = !1
	}).on("mousedown", ".cs_bpt", function() {
		$(".cs_bpt").removeClass("active");
		$(this).addClass("active");
		l = $(this).css("left");
		s = $(".cs_bpt").index(this);
		var b = g[s][1];
		pos = Number(l.slice(0, -2)) + 5;
		pos = Math.round(100 * (pos / 360));
		$b_col.spectrum("set", b);
		$b_loc.val(pos)
	});
	$(".cs_t").mousedown(function() {
		E && (m.l = A - w.left - 5, $(".cs_t .cs_tpt").removeClass("active"), t_alpha = parseInt($t_alpha.val()), pos = Math.round((m.l + 5) / 3.6), opacity = t_alpha / 100, $("#t_loc").val(pos), addelement = "<div class='cs_tpt active' style='left:" + m.l + "px' ><div style='background-color:black;opacity:" + opacity + ";filter:alpha(opacity=" + t_alpha + ")'></div></div>", $(".cs_t").append(addelement), z = h.length, h.push([pos, t_alpha]), $alpha_delete.removeAttr("disabled"));
		J = !0;
		q();
		p();
		n();
		return !1
	});
	$(".cs_b").mousedown(function() {
		E && (m.l = A - w.left - 5, $(".cs_b .cs_bpt").removeClass("active"), colhex = $b_col.spectrum("get").toHexString(), l = Number(m.l) + 5, pos = Math.round(100 * (l / 360)), $("#b_loc").val(pos), addelement = "<div class='cs_bpt active' style='left:" + m.l + "px' ><div style='background-color:" + colhex + "' ></div></div>", $(".cs_b").append(addelement), s = g.length, g.push([pos, colhex]), $color_delete.removeAttr("disabled"));
		K = !0;
		q();
		p();
		n();
		return !1
	});
	$t_alpha.change(function() {
		alp = $(this).val();
		h[z][1] = alp;
		opacity = alp / 100;
		$(".cs_t .active div").css("opacity", opacity);
		q();
		p();
		n()
	});
	$t_loc.change(function() {
		loc = $(this).val();
		h[z][0] = loc;
		M();
		q();
		p();
		n()
	});
	$b_loc.change(function() {
		loc = $(this).val();
		g[s][0] = loc;
		N();
		q();
		p();
		n()
	});
	$alpha_delete.click(function() {
		a_len = h.length;
		2 < a_len && (h.splice(z, 1), z = 0, M(), q(), p(), n(), 3 == a_len && $alpha_delete.attr("disabled", "disabled"))
	});
	$color_delete.click(function() {
		b_len = g.length;
		2 < b_len && (g.splice(s, 1), s = 0, N(), q(), p(), n(), 3 == b_len && $color_delete.attr("disabled", "disabled"))
	});
	$g_layer_cont.on("click", ".g_layer", function() {
		console.log(e);
		$g_layer_cont.find(".g_layer").removeClass("selected");
		$(this).addClass("selected");
		f = $(this).index();
		O(f);
		D()
	});
	$g_layer_new.click(function() {
		newlayerjson = {
			type: "l",
			deg: 0,
			stopper: {
				0: {
					position: 0,
					color: "#ffffff",
					alpha: 0
				},
				1: {
					position: 100,
					color: "#000000",
					alpha: 100
				}
			}
		};
		e.multilayer.unshift(newlayerjson);
		f = 0;
		bgcss = C(e.multilayer[f].stopper, e.multilayer[f].type, e.multilayer[f].deg);
		$g_layer_cont.find(".g_layer").removeClass("selected");
		var b = $(document.createElement("div")).addClass("g_layer selected").html('<div class="g_layer_bgt" ><div class="g_layer_bg" style="' + bgcss + '"></div></div>');
		$g_layer_cont.prepend(b);
		F();
		D()
	});
	$g_layer_up.click(function() {
		var b = {},
			b = e.multilayer[f];
		e.multilayer[f] = e.multilayer[f - 1];
		e.multilayer[f - 1] = b;
		f--;
		F();
		D()
	});
	$g_layer_down.click(function() {
		var b = {},
			b = e.multilayer[f];
		e.multilayer[f] = e.multilayer[f + 1];
		e.multilayer[f + 1] = b;
		f++;
		F();
		D()
	});
	$g_layer_del.click(function() {
		$g_layer_cont.find(".selected").remove();
		var b = {};
		delete b;
		b.multilayer = [];
		for (var d = 0; d < e.multilayer.length; d++) d != f && b.multilayer.push(e.multilayer[d]);
		delete e;
		e = b;
		f && f--;
		F();
		D()
	});
	$multigrad_preset.on("click", ".g_l_preset", function() {
		layerstr = $(this).attr("data-layer");
		e = JSON.parse(layerstr);
		f = 0;
		F();
		D()
	});
	$("#img_angle").iCircleSlider();
	$("#t_alpha").iSlider({
		min: 0,
		max: 100
	});
	$("#t_loc").iSlider({
		min: 0,
		max: 100
	});
	$("#b_loc").iSlider({
		min: 0,
		max: 100
	});
	$b_col.spectrum({
		color: "#f00",
		showInput: !0,
		showPalette: !0,
		palette: [
			["black", "gray", "silver"],
			["white", "red", "maroon"],
			["yellow", "olive", "lime"],
			["green", "aqua", "teal"],
			["blue", "navy", "fuchsia"],
			["purple", "orange"]
		],
		clickoutFiresChange: !0,
		move: function(b) {
			col = b.toHexString();
			$(".cs_b .active div").css("background-color", col);
			g[s][1] = col;
			q();
			p();
			n()
		},
		change: function(b) {
			col = b.toHexString();
			$(".cs_b .active div").css("background-color", col);
			g[s][1] = col;
			q();
			p();
			n()
		},
		hide: function(b) {
			col = b.toHexString();
			$(".cs_b .active div").css("background-color", col);
			g[s][1] = col;
			q();
			p();
			n()
		}
	});
	sPageURL = window.location.search.substring(1);
	"" != sPageURL && r(sPageURL);
	r("0_ffffff,100_0f3c78&0_0,100_100&l_45");
	r("0_070707,100_000000&50_0,51_100&l_135|0_ffffff,100_ffffff&49_0,50_100&l_90|0_000000,100_000000&0_100,100_100&l_0");
	r("0_0fff00,100_000000&0_0,100_100&l_135|0_0f7832,50_ffffff,51_0f7832&0_100,100_100&l_225");
	r("0_ffffff,100_000000&0_0,100_100&l_45");
	r("0_ffffff,100_000000&0_0,100_100&r_45");
	r("0_ff0000,50_ffa900,60_000000&0_100,100_100&r_0|0_ffffff,100_ffffff&0_100,100_100&l_225");
	r("0_070707,100_000000&50_0,51_100&r_0|0_ffffff,100_ffffff&49_0,50_100&l_90|0_000000,100_000000&0_100,100_100&l_0");
	r("0_ffffff,100_ffffff&50_0,51_100&r_0|0_ffffff,100_000000&50_0,51_100&l_270|0_ffffff,100_ffffff&0_100,100_100&l_0");
	r("0_ffffff,100_ffffff&0_0,100_100&l_270|0_ff0000,16_ff00ff,33_0000ff,50_00ffff,66_00ff00,83_ffff00,100_ff0000&0_100,100_100&l_180");
	r("0_ffffff,100_FF0000&50_0,51_100&l_45|0_ffffff,100_00ff1e&50_0,51_100&r_0|0_ffffff,100_ffffff&0_100,100_100&l_0");
	r("0_ffffff,100_000000&0_0,50_0,51_100,100_100&l_180|0_ffffff,100_ff0000&0_0,49_0,50_100,100_100&l_90|0_99DAFF,100_ffff00&0_0,49_0,50_100,100_100&l_0");
	$(".g_l_preset").first().trigger("click")
});
(function(c) {
	c.fn.iSlider = function(p) {
		var a = jQuery.extend({
			id: "",
			min: 0,
			max: 100
		}, p);
		return this.each(function() {
			a.id = "#" + this.id;
			var b = c(a.id).val(),
				j = c(a.id).offset(),
				l = c(a.id).outerHeight(),
				m = 0,
				k = {
					top: 0,
					left: 0
				},
				n = 0,
				d = !1,
				e = 0,
				f = !1,
				g = 0;
			c(a.id).on("click", function() {
				if (!1 == d) {
					b = c(a.id).val();
					j = c(a.id).offset();
					l = c(a.id).outerHeight();
					n = a.max - a.min;
					var h = c("<div class='scontainer' ></div>").css({
						top: j.top + l,
						left: j.left,
						position: "absolute"
					}).append("<div class='sbar' style='width:" + n + "px' ><div class='shandle'>&nbsp;</div></div>");
					h.mousedown(function() {
						f = !0;
						return !1
					}).mouseup(function(a) {
						a.stopPropagation();
						f = !1
					});
					c("body").append(h);
					k = c(".sbar").offset();
					g = c(".shandle").width() / 2;
					"" == b ? b = a.min : b < a.min ? b = a.min : b > a.max && (b = a.max);
					e = Math.round(b) - a.min - Math.round(g);
					c(".shandle").css({
						left: e
					});
					d = !0
				}
				return !1
			}).on("keyup", function() {
				!0 == d && (b = c(a.id).val(), "" == b ? b = a.min : b < a.min ? b = a.min : b > a.max && (b = a.max), e = Math.round(b) - a.min - Math.round(g), c(".shandle").css({
					left: e
				}));
				return !1
			});
			c(document).mousemove(function(h) {
				!0 == d && f && (m = h.pageX, b = Math.round(m - k.left + a.min), b < a.min ? b = a.min : b > a.max && (b = a.max), e = k.left + b - a.min - g, c(".shandle").offset({
					left: e
				}), c(a.id).val(b).change())
			}).mouseup(function() {
				f = !1;
				d && (d = !1, c(".scontainer").remove())
			})
		})
	}
})(jQuery);
(function(a) {
	a.fn.iCircleSlider = function(q) {
		var c = jQuery.extend({
			id: "",
			dialwidth: 50,
			degbound: 1
		}, q);
		return this.each(function() {
			c.id = "#" + this.id;
			var f = a(c.id).val(),
				n = a(c.id).offset(),
				p = a(c.id).outerHeight(),
				g = 0,
				h = 0,
				k = !1,
				e = !1,
				l = g,
				m = h,
				b = 0;
			a(c.id).on("click", function(d) {
				!1 == e && (f = a(c.id).val(), f = c.degbound * Math.round(f / c.degbound), n = a(c.id).offset(), p = a(c.id).outerHeight(), d = a("<div class='circlecontainer' ></div>").css({
					top: n.top + p,
					left: n.left,
					position: "absolute"
				}).append("<div id='dial_0'>0</div><div id='dial_90'>90</div><div id='dial_180'>180</div><div id='dial_270'>270</div><div id='r_pt'></div><div id='dial'><div id='dial_l' >&nbsp;</div></div>"), a("body").append(d), d.attr("unselectable", "on").css("UserSelect", "none").css("MozUserSelect", "none"), calct = 180 - f, a("#dial").css({
					transform: "rotate(" + calct + "deg)",
					"-ms-transform": "rotate(" + calct + "deg)",
					"-webkit-transform": "rotate(" + calct + "deg)",
					"-o-transform": "rotate(" + calct + "deg)",
					"-moz-transform": "rotate(" + calct + "deg)"
				}), d.mousedown(function(d) {
					var e = a("#r_pt").offset();
					l = e.left - g;
					m = e.top - h;
					b = Math.round(Math.atan2(m, l) * (180 / Math.PI));
					a("#dial").css({
						transform: "rotate(" + b + "deg)",
						"-ms-transform": "rotate(" + b + "deg)",
						"-webkit-transform": "rotate(" + b + "deg)",
						"-o-transform": "rotate(" + b + "deg)",
						"-moz-transform": "rotate(" + b + "deg)"
					});
					b = c.degbound * Math.round(b / c.degbound);
					calct = 180 - b;
					a(c.id).val(calct).change();
					k = !0;
					d.preventDefault()
				}).mouseup(function(a) {
					a.stopPropagation();
					k = !1
				}), e = !0);
				return !1
			}).on("keyup", function() {
				!0 == e && (calct = 180 - a(c.id).val(), a("#dial").css({
					transform: "rotate(" + calct + "deg)",
					"-ms-transform": "rotate(" + calct + "deg)",
					"-webkit-transform": "rotate(" + calct + "deg)",
					"-o-transform": "rotate(" + calct + "deg)",
					"-moz-transform": "rotate(" + calct + "deg)"
				}));
				return !1
			});
			a(document).mousemove(function(d) {
				!0 == e && (g = d.pageX, h = d.pageY, k && (d = a("#r_pt").offset(), l = d.left - g, m = d.top - h, b = Math.round(Math.atan2(m, l) * (180 / Math.PI)), a("#dial").css({
					transform: "rotate(" + b + "deg)",
					"-ms-transform": "rotate(" + b + "deg)",
					"-webkit-transform": "rotate(" + b + "deg)",
					"-o-transform": "rotate(" + b + "deg)",
					"-moz-transform": "rotate(" + b + "deg)"
				}), b = c.degbound * Math.round(b / c.degbound), calct = 180 - b, a(c.id).val(calct).change()))
			}).mouseup(function(b) {
				k = !1;
				e && (e = !1, a(".circlecontainer").remove())
			})
		})
	}
})(jQuery);
(function(window, $, undefined) {
	var defaultOpts = {
			beforeShow: noop,
			move: noop,
			change: noop,
			show: noop,
			hide: noop,
			color: false,
			flat: false,
			showInput: false,
			showButtons: true,
			clickoutFiresChange: false,
			showInitial: false,
			showPalette: false,
			showPaletteOnly: false,
			showSelectionPalette: true,
			localStorageKey: false,
			appendTo: "body",
			maxSelectionSize: 7,
			cancelText: "cancel",
			chooseText: "choose",
			preferredFormat: false,
			className: "",
			showAlpha: false,
			theme: "sp-light",
			palette: ['fff', '000'],
			selectionPalette: [],
			disabled: false
		},
		spectrums = [],
		IE = !!/msie/i.exec(window.navigator.userAgent),
		rgbaSupport = (function() {
			function contains(str, substr) {
				return !!~('' + str).indexOf(substr);
			}
			var elem = document.createElement('div');
			var style = elem.style;
			style.cssText = 'background-color:rgba(0,0,0,.5)';
			return contains(style.backgroundColor, 'rgba') || contains(style.backgroundColor, 'hsla');
		})(),
		replaceInput = ["<div class='sp-replacer'>", "<div class='sp-preview'><div class='sp-preview-inner'></div></div>", "<div class='sp-dd'>&#9660;</div>", "</div>"].join(''),
		markup = (function() {
			var gradientFix = "";
			if (IE) {
				for (var i = 1; i <= 6; i++) {
					gradientFix += "<div class='sp-" + i + "'></div>";
				}
			}
			return ["<div class='sp-container sp-hidden'>", "<div class='sp-palette-container'>", "<div class='sp-palette sp-thumb sp-cf'></div>", "</div>", "<div class='sp-picker-container'>", "<div class='sp-top sp-cf'>", "<div class='sp-fill'></div>", "<div class='sp-top-inner'>", "<div class='sp-color'>", "<div class='sp-sat'>", "<div class='sp-val'>", "<div class='sp-dragger'></div>", "</div>", "</div>", "</div>", "<div class='sp-hue'>", "<div class='sp-slider'></div>", gradientFix, "</div>", "</div>", "<div class='sp-alpha'><div class='sp-alpha-inner'><div class='sp-alpha-handle'></div></div></div>", "</div>", "<div class='sp-input-container sp-cf'>", "<input class='sp-input' type='text' spellcheck='false'  />", "</div>", "<div class='sp-initial sp-thumb sp-cf'></div>", "<div class='sp-button-container sp-cf'>", "<a class='sp-cancel' href='#'></a>", "<button class='sp-choose'></button>", "</div>", "</div>", "</div>"].join("");
		})();

	function paletteTemplate(p, color, className) {
		var html = [];
		for (var i = 0; i < p.length; i++) {
			var tiny = tinycolor(p[i]);
			var c = tiny.toHsl().l < 0.5 ? "sp-thumb-el sp-thumb-dark" : "sp-thumb-el sp-thumb-light";
			c += (tinycolor.equals(color, p[i])) ? " sp-thumb-active" : "";
			var swatchStyle = rgbaSupport ? ("background-color:" + tiny.toRgbString()) : "filter:" + tiny.toFilter();
			html.push('<span title="' + tiny.toRgbString() + '" data-color="' + tiny.toRgbString() + '" class="' + c + '"><span class="sp-thumb-inner" style="' + swatchStyle + ';" /></span>');
		}
		return "<div class='sp-cf " + className + "'>" + html.join('') + "</div>";
	}

	function hideAll() {
		for (var i = 0; i < spectrums.length; i++) {
			if (spectrums[i]) {
				spectrums[i].hide();
			}
		}
	}

	function instanceOptions(o, callbackContext) {
		var opts = $.extend({}, defaultOpts, o);
		opts.callbacks = {
			'move': bind(opts.move, callbackContext),
			'change': bind(opts.change, callbackContext),
			'show': bind(opts.show, callbackContext),
			'hide': bind(opts.hide, callbackContext),
			'beforeShow': bind(opts.beforeShow, callbackContext)
		};
		return opts;
	}

	function spectrum(element, o) {
		var opts = instanceOptions(o, element),
			flat = opts.flat,
			showSelectionPalette = opts.showSelectionPalette,
			localStorageKey = opts.localStorageKey,
			theme = opts.theme,
			callbacks = opts.callbacks,
			resize = throttle(reflow, 10),
			visible = false,
			dragWidth = 0,
			dragHeight = 0,
			dragHelperHeight = 0,
			slideHeight = 0,
			slideWidth = 0,
			alphaWidth = 0,
			alphaSlideHelperWidth = 0,
			slideHelperHeight = 0,
			currentHue = 0,
			currentSaturation = 0,
			currentValue = 0,
			currentAlpha = 1,
			palette = opts.palette.slice(0),
			paletteArray = $.isArray(palette[0]) ? palette : [palette],
			selectionPalette = opts.selectionPalette.slice(0),
			maxSelectionSize = opts.maxSelectionSize,
			draggingClass = "sp-dragging",
			shiftMovementDirection = null;
		var doc = element.ownerDocument,
			body = doc.body,
			boundElement = $(element),
			disabled = false,
			container = $(markup, doc).addClass(theme),
			dragger = container.find(".sp-color"),
			dragHelper = container.find(".sp-dragger"),
			slider = container.find(".sp-hue"),
			slideHelper = container.find(".sp-slider"),
			alphaSliderInner = container.find(".sp-alpha-inner"),
			alphaSlider = container.find(".sp-alpha"),
			alphaSlideHelper = container.find(".sp-alpha-handle"),
			textInput = container.find(".sp-input"),
			paletteContainer = container.find(".sp-palette"),
			initialColorContainer = container.find(".sp-initial"),
			cancelButton = container.find(".sp-cancel"),
			chooseButton = container.find(".sp-choose"),
			isInput = boundElement.is("input"),
			shouldReplace = isInput && !flat,
			replacer = (shouldReplace) ? $(replaceInput).addClass(theme).addClass(opts.className) : $([]),
			offsetElement = (shouldReplace) ? replacer : boundElement,
			previewElement = replacer.find(".sp-preview-inner"),
			initialColor = opts.color || (isInput && boundElement.val()),
			colorOnShow = false,
			preferredFormat = opts.preferredFormat,
			currentPreferredFormat = preferredFormat,
			clickoutFiresChange = !opts.showButtons || opts.clickoutFiresChange;

		function applyOptions() {
			container.toggleClass("sp-flat", flat);
			container.toggleClass("sp-input-disabled", !opts.showInput);
			container.toggleClass("sp-alpha-enabled", opts.showAlpha);
			container.toggleClass("sp-buttons-disabled", !opts.showButtons);
			container.toggleClass("sp-palette-disabled", !opts.showPalette);
			container.toggleClass("sp-palette-only", opts.showPaletteOnly);
			container.toggleClass("sp-initial-disabled", !opts.showInitial);
			container.addClass(opts.className);
			reflow();
		}

		function initialize() {
			if (IE) {
				container.find("*:not(input)").attr("unselectable", "on");
			}
			applyOptions();
			if (shouldReplace) {
				boundElement.after(replacer).hide();
			}
			if (flat) {
				boundElement.after(container).hide();
			} else {
				var appendTo = opts.appendTo === "parent" ? boundElement.parent() : $(opts.appendTo);
				if (appendTo.length !== 1) {
					appendTo = $("body");
				}
				appendTo.append(container);
			} if (localStorageKey && window.localStorage) {
				try {
					var oldPalette = window.localStorage[localStorageKey].split(",#");
					if (oldPalette.length > 1) {
						delete window.localStorage[localStorageKey];
						$.each(oldPalette, function(i, c) {
							addColorToSelectionPalette(c);
						});
					}
				} catch (e) {}
				try {
					selectionPalette = window.localStorage[localStorageKey].split(";");
				} catch (e) {}
			}
			offsetElement.bind("click.spectrum touchstart.spectrum", function(e) {
				if (!disabled) {
					toggle();
				}
				e.stopPropagation();
				if (!$(e.target).is("input")) {
					e.preventDefault();
				}
			});
			if (boundElement.is(":disabled") || (opts.disabled === true)) {
				disable();
			}
			container.click(stopPropagation);
			textInput.change(setFromTextInput);
			textInput.bind("paste", function() {
				setTimeout(setFromTextInput, 1);
			});
			textInput.keydown(function(e) {
				if (e.keyCode == 13) {
					setFromTextInput();
				}
			});
			cancelButton.text(opts.cancelText);
			cancelButton.bind("click.spectrum", function(e) {
				e.stopPropagation();
				e.preventDefault();
				hide("cancel");
			});
			chooseButton.text(opts.chooseText);
			chooseButton.bind("click.spectrum", function(e) {
				e.stopPropagation();
				e.preventDefault();
				if (isValid()) {
					updateOriginalInput(true);
					hide();
				}
			});
			draggable(alphaSlider, function(dragX, dragY, e) {
				currentAlpha = (dragX / alphaWidth);
				if (e.shiftKey) {
					currentAlpha = Math.round(currentAlpha * 10) / 10;
				}
				move();
			});
			draggable(slider, function(dragX, dragY) {
				currentHue = parseFloat(dragY / slideHeight);
				move();
			}, dragStart, dragStop);
			draggable(dragger, function(dragX, dragY, e) {
				if (!e.shiftKey) {
					shiftMovementDirection = null;
				} else if (!shiftMovementDirection) {
					var oldDragX = currentSaturation * dragWidth;
					var oldDragY = dragHeight - (currentValue * dragHeight);
					var furtherFromX = Math.abs(dragX - oldDragX) > Math.abs(dragY - oldDragY);
					shiftMovementDirection = furtherFromX ? "x" : "y";
				}
				var setSaturation = !shiftMovementDirection || shiftMovementDirection === "x";
				var setValue = !shiftMovementDirection || shiftMovementDirection === "y";
				if (setSaturation) {
					currentSaturation = parseFloat(dragX / dragWidth);
				}
				if (setValue) {
					currentValue = parseFloat((dragHeight - dragY) / dragHeight);
				}
				move();
			}, dragStart, dragStop);
			if (!!initialColor) {
				set(initialColor);
				updateUI();
				currentPreferredFormat = preferredFormat || tinycolor(initialColor).format;
				addColorToSelectionPalette(initialColor);
			} else {
				updateUI();
			} if (flat) {
				show();
			}

			function palletElementClick(e) {
				if (e.data && e.data.ignore) {
					set($(this).data("color"));
					move();
				} else {
					set($(this).data("color"));
					updateOriginalInput(true);
					move();
					hide();
				}
				return false;
			}
			var paletteEvent = IE ? "mousedown.spectrum" : "click.spectrum touchstart.spectrum";
			paletteContainer.delegate(".sp-thumb-el", paletteEvent, palletElementClick);
			initialColorContainer.delegate(".sp-thumb-el:nth-child(1)", paletteEvent, {
				ignore: true
			}, palletElementClick);
		}

		function addColorToSelectionPalette(color) {
			if (showSelectionPalette) {
				var colorRgb = tinycolor(color).toRgbString();
				if ($.inArray(colorRgb, selectionPalette) === -1) {
					selectionPalette.push(colorRgb);
					while (selectionPalette.length > maxSelectionSize) {
						selectionPalette.shift();
					}
				}
				if (localStorageKey && window.localStorage) {
					try {
						window.localStorage[localStorageKey] = selectionPalette.join(";");
					} catch (e) {}
				}
			}
		}

		function getUniqueSelectionPalette() {
			var unique = [];
			var p = selectionPalette;
			var paletteLookup = {};
			var rgb;
			if (opts.showPalette) {
				for (var i = 0; i < paletteArray.length; i++) {
					for (var j = 0; j < paletteArray[i].length; j++) {
						rgb = tinycolor(paletteArray[i][j]).toRgbString();
						paletteLookup[rgb] = true;
					}
				}
				for (i = 0; i < p.length; i++) {
					rgb = tinycolor(p[i]).toRgbString();
					if (!paletteLookup.hasOwnProperty(rgb)) {
						unique.push(p[i]);
						paletteLookup[rgb] = true;
					}
				}
			}
			return unique.reverse().slice(0, opts.maxSelectionSize);
		}

		function drawPalette() {
			var currentColor = get();
			var html = $.map(paletteArray, function(palette, i) {
				return paletteTemplate(palette, currentColor, "sp-palette-row sp-palette-row-" + i);
			});
			if (selectionPalette) {
				html.push(paletteTemplate(getUniqueSelectionPalette(), currentColor, "sp-palette-row sp-palette-row-selection"));
			}
			paletteContainer.html(html.join(""));
		}

		function drawInitial() {
			if (opts.showInitial) {
				var initial = colorOnShow;
				var current = get();
				initialColorContainer.html(paletteTemplate([initial, current], current, "sp-palette-row-initial"));
			}
		}

		function dragStart() {
			if (dragHeight <= 0 || dragWidth <= 0 || slideHeight <= 0) {
				reflow();
			}
			container.addClass(draggingClass);
			shiftMovementDirection = null;
		}

		function dragStop() {
			container.removeClass(draggingClass);
		}

		function setFromTextInput() {
			var tiny = tinycolor(textInput.val());
			if (tiny.ok) {
				set(tiny);
			} else {
				textInput.addClass("sp-validation-error");
			}
		}

		function toggle() {
			if (visible) {
				hide();
			} else {
				show();
			}
		}

		function show() {
			var event = $.Event('beforeShow.spectrum');
			if (visible) {
				reflow();
				return;
			}
			boundElement.trigger(event, [get()]);
			if (callbacks.beforeShow(get()) === false || event.isDefaultPrevented()) {
				return;
			}
			hideAll();
			visible = true;
			$(doc).bind("click.spectrum", hide);
			$(window).bind("resize.spectrum", resize);
			replacer.addClass("sp-active");
			container.removeClass("sp-hidden");
			if (opts.showPalette) {
				drawPalette();
			}
			reflow();
			updateUI();
			colorOnShow = get();
			drawInitial();
			callbacks.show(colorOnShow);
			boundElement.trigger('show.spectrum', [colorOnShow]);
		}

		function hide(e) {
			if (e && e.type == "click" && e.button == 2) {
				return;
			}
			if (!visible || flat) {
				return;
			}
			visible = false;
			$(doc).unbind("click.spectrum", hide);
			$(window).unbind("resize.spectrum", resize);
			replacer.removeClass("sp-active");
			container.addClass("sp-hidden");
			var colorHasChanged = !tinycolor.equals(get(), colorOnShow);
			if (colorHasChanged) {
				if (clickoutFiresChange && e !== "cancel") {
					updateOriginalInput(true);
				} else {
					revert();
				}
			}
			callbacks.hide(get());
			boundElement.trigger('hide.spectrum', [get()]);
		}

		function revert() {
			set(colorOnShow, true);
		}

		function set(color, ignoreFormatChange) {
			if (tinycolor.equals(color, get())) {
				return;
			}
			var newColor = tinycolor(color);
			var newHsv = newColor.toHsv();
			currentHue = (newHsv.h % 360) / 360;
			currentSaturation = newHsv.s;
			currentValue = newHsv.v;
			currentAlpha = newHsv.a;
			updateUI();
			if (newColor.ok && !ignoreFormatChange) {
				currentPreferredFormat = preferredFormat || newColor.format;
			}
		}

		function get(opts) {
			opts = opts || {};
			return tinycolor.fromRatio({
				h: currentHue,
				s: currentSaturation,
				v: currentValue,
				a: Math.round(currentAlpha * 100) / 100
			}, {
				format: opts.format || currentPreferredFormat
			});
		}

		function isValid() {
			return !textInput.hasClass("sp-validation-error");
		}

		function move() {
			updateUI();
			callbacks.move(get());
			boundElement.trigger('move.spectrum', [get()]);
		}

		function updateUI() {
			textInput.removeClass("sp-validation-error");
			updateHelperLocations();
			var flatColor = tinycolor.fromRatio({
				h: currentHue,
				s: 1,
				v: 1
			});
			dragger.css("background-color", flatColor.toHexString());
			var format = currentPreferredFormat;
			if (currentAlpha < 1) {
				if (format === "hex" || format === "hex3" || format === "hex6" || format === "name") {
					format = "rgb";
				}
			}
			var realColor = get({
					format: format
				}),
				realHex = realColor.toHexString(),
				realRgb = realColor.toRgbString();
			if (rgbaSupport || realColor.alpha === 1) {
				previewElement.css("background-color", realRgb);
			} else {
				previewElement.css("background-color", "transparent");
				previewElement.css("filter", realColor.toFilter());
			} if (opts.showAlpha) {
				var rgb = realColor.toRgb();
				rgb.a = 0;
				var realAlpha = tinycolor(rgb).toRgbString();
				var gradient = "linear-gradient(left, " + realAlpha + ", " + realHex + ")";
				if (IE) {
					alphaSliderInner.css("filter", tinycolor(realAlpha).toFilter({
						gradientType: 1
					}, realHex));
				} else {
					alphaSliderInner.css("background", "-webkit-" + gradient);
					alphaSliderInner.css("background", "-moz-" + gradient);
					alphaSliderInner.css("background", "-ms-" + gradient);
					alphaSliderInner.css("background", gradient);
				}
			}
			if (opts.showInput) {
				textInput.val(realColor.toString(format));
			}
			if (opts.showPalette) {
				drawPalette();
			}
			drawInitial();
		}

		function updateHelperLocations() {
			var s = currentSaturation;
			var v = currentValue;
			var dragX = s * dragWidth;
			var dragY = dragHeight - (v * dragHeight);
			dragX = Math.max(-dragHelperHeight, Math.min(dragWidth - dragHelperHeight, dragX - dragHelperHeight));
			dragY = Math.max(-dragHelperHeight, Math.min(dragHeight - dragHelperHeight, dragY - dragHelperHeight));
			dragHelper.css({
				"top": dragY,
				"left": dragX
			});
			var alphaX = currentAlpha * alphaWidth;
			alphaSlideHelper.css({
				"left": alphaX - (alphaSlideHelperWidth / 2)
			});
			var slideY = (currentHue) * slideHeight;
			slideHelper.css({
				"top": slideY - slideHelperHeight
			});
		}

		function updateOriginalInput(fireCallback) {
			var color = get();
			if (isInput) {
				boundElement.val(color.toString(currentPreferredFormat)).change();
			}
			var hasChanged = !tinycolor.equals(color, colorOnShow);
			colorOnShow = color;
			addColorToSelectionPalette(color);
			if (fireCallback && hasChanged) {
				callbacks.change(color);
				boundElement.trigger('change.spectrum', [color]);
			}
		}

		function reflow() {
			dragWidth = dragger.width();
			dragHeight = dragger.height();
			dragHelperHeight = dragHelper.height();
			slideWidth = slider.width();
			slideHeight = slider.height();
			slideHelperHeight = slideHelper.height();
			alphaWidth = alphaSlider.width();
			alphaSlideHelperWidth = alphaSlideHelper.width();
			if (!flat) {
				container.css("position", "absolute");
				container.offset(getOffset(container, offsetElement));
			}
			updateHelperLocations();
		}

		function destroy() {
			boundElement.show();
			offsetElement.unbind("click.spectrum touchstart.spectrum");
			container.remove();
			replacer.remove();
			spectrums[spect.id] = null;
		}

		function option(optionName, optionValue) {
			if (optionName === undefined) {
				return $.extend({}, opts);
			}
			if (optionValue === undefined) {
				return opts[optionName];
			}
			opts[optionName] = optionValue;
			applyOptions();
		}

		function enable() {
			disabled = false;
			boundElement.attr("disabled", false);
			offsetElement.removeClass("sp-disabled");
		}

		function disable() {
			hide();
			disabled = true;
			boundElement.attr("disabled", true);
			offsetElement.addClass("sp-disabled");
		}
		initialize();
		var spect = {
			show: show,
			hide: hide,
			toggle: toggle,
			reflow: reflow,
			option: option,
			enable: enable,
			disable: disable,
			set: function(c) {
				set(c);
				updateOriginalInput();
			},
			get: get,
			destroy: destroy,
			container: container
		};
		spect.id = spectrums.push(spect) - 1;
		return spect;
	}

	function getOffset(picker, input) {
		var extraY = 0;
		var dpWidth = picker.outerWidth();
		var dpHeight = picker.outerHeight();
		var inputHeight = input.outerHeight();
		var doc = picker[0].ownerDocument;
		var docElem = doc.documentElement;
		var viewWidth = docElem.clientWidth + $(doc).scrollLeft();
		var viewHeight = docElem.clientHeight + $(doc).scrollTop();
		var offset = input.offset();
		offset.top += inputHeight;
		offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ? Math.abs(offset.left + dpWidth - viewWidth) : 0);
		offset.top -= Math.min(offset.top, ((offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ? Math.abs(dpHeight + inputHeight - extraY) : extraY));
		return offset;
	}

	function noop() {}

	function stopPropagation(e) {
		e.stopPropagation();
	}

	function bind(func, obj) {
		var slice = Array.prototype.slice;
		var args = slice.call(arguments, 2);
		return function() {
			return func.apply(obj, args.concat(slice.call(arguments)));
		};
	}

	function draggable(element, onmove, onstart, onstop) {
		onmove = onmove || function() {};
		onstart = onstart || function() {};
		onstop = onstop || function() {};
		var doc = element.ownerDocument || document;
		var dragging = false;
		var offset = {};
		var maxHeight = 0;
		var maxWidth = 0;
		var hasTouch = ('ontouchstart' in window);
		var duringDragEvents = {};
		duringDragEvents["selectstart"] = prevent;
		duringDragEvents["dragstart"] = prevent;
		duringDragEvents["touchmove mousemove"] = move;
		duringDragEvents["touchend mouseup"] = stop;

		function prevent(e) {
			if (e.stopPropagation) {
				e.stopPropagation();
			}
			if (e.preventDefault) {
				e.preventDefault();
			}
			e.returnValue = false;
		}

		function move(e) {
			if (dragging) {
				if (IE && document.documentMode < 9 && !e.button) {
					return stop();
				}
				var touches = e.originalEvent.touches;
				var pageX = touches ? touches[0].pageX : e.pageX;
				var pageY = touches ? touches[0].pageY : e.pageY;
				var dragX = Math.max(0, Math.min(pageX - offset.left, maxWidth));
				var dragY = Math.max(0, Math.min(pageY - offset.top, maxHeight));
				if (hasTouch) {
					prevent(e);
				}
				onmove.apply(element, [dragX, dragY, e]);
			}
		}

		function start(e) {
			var rightclick = (e.which) ? (e.which == 3) : (e.button == 2);
			var touches = e.originalEvent.touches;
			if (!rightclick && !dragging) {
				if (onstart.apply(element, arguments) !== false) {
					dragging = true;
					maxHeight = $(element).height();
					maxWidth = $(element).width();
					offset = $(element).offset();
					$(doc).bind(duringDragEvents);
					$(doc.body).addClass("sp-dragging");
					if (!hasTouch) {
						move(e);
					}
					prevent(e);
				}
			}
		}

		function stop() {
			if (dragging) {
				$(doc).unbind(duringDragEvents);
				$(doc.body).removeClass("sp-dragging");
				onstop.apply(element, arguments);
			}
			dragging = false;
		}
		$(element).bind("touchstart mousedown", start);
	}

	function throttle(func, wait, debounce) {
		var timeout;
		return function() {
			var context = this,
				args = arguments;
			var throttler = function() {
				timeout = null;
				func.apply(context, args);
			};
			if (debounce) clearTimeout(timeout);
			if (debounce || !timeout) timeout = setTimeout(throttler, wait);
		};
	}

	function log() {
		if (window.console) {
			if (Function.prototype.bind) log = Function.prototype.bind.call(console.log, console);
			else log = function() {
				Function.prototype.apply.call(console.log, console, arguments);
			};
			log.apply(this, arguments);
		}
	}
	var dataID = "spectrum.id";
	$.fn.spectrum = function(opts, extra) {
		if (typeof opts == "string") {
			var returnValue = this;
			var args = Array.prototype.slice.call(arguments, 1);
			this.each(function() {
				var spect = spectrums[$(this).data(dataID)];
				if (spect) {
					var method = spect[opts];
					if (!method) {
						throw new Error("Spectrum: no such method: '" + opts + "'");
					}
					if (opts == "get") {
						returnValue = spect.get();
					} else if (opts == "container") {
						returnValue = spect.container;
					} else if (opts == "option") {
						returnValue = spect.option.apply(spect, args);
					} else if (opts == "destroy") {
						spect.destroy();
						$(this).removeData(dataID);
					} else {
						method.apply(spect, args);
					}
				}
			});
			return returnValue;
		}
		return this.spectrum("destroy").each(function() {
			var spect = spectrum(this, opts);
			$(this).data(dataID, spect.id);
		});
	};
	$.fn.spectrum.load = true;
	$.fn.spectrum.loadOpts = {};
	$.fn.spectrum.draggable = draggable;
	$.fn.spectrum.defaults = defaultOpts;
	$.spectrum = {};
	$.spectrum.localization = {};
	$.spectrum.palettes = {};
	$.fn.spectrum.processNativeColorInputs = function() {
		var colorInput = $("<input type='color' value='!' />")[0];
		var supportsColor = colorInput.type === "color" && colorInput.value != "!";
		if (!supportsColor) {
			$("input[type=color]").spectrum({
				preferredFormat: "hex6"
			});
		}
	};
	(function(root) {
		var trimLeft = /^[\\s,#]+/,
			trimRight = /\\s+$/,
			tinyCounter = 0,
			math = Math,
			mathRound = math.round,
			mathMin = math.min,
			mathMax = math.max,
			mathRandom = math.random;

		function tinycolor(color, opts) {
			color = (color) ? color : '';
			opts = opts || {};
			if (typeof color == "object" && color.hasOwnProperty("_tc_id")) {
				return color;
			}
			var rgb = inputToRGB(color);
			var r = rgb.r,
				g = rgb.g,
				b = rgb.b,
				a = rgb.a,
				roundA = mathRound(100 * a) / 100,
				format = opts.format || rgb.format;
			if (r < 1) {
				r = mathRound(r);
			}
			if (g < 1) {
				g = mathRound(g);
			}
			if (b < 1) {
				b = mathRound(b);
			}
			return {
				ok: rgb.ok,
				format: format,
				_tc_id: tinyCounter++,
				alpha: a,
				toHsv: function() {
					var hsv = rgbToHsv(r, g, b);
					return {
						h: hsv.h * 360,
						s: hsv.s,
						v: hsv.v,
						a: a
					};
				},
				toHsvString: function() {
					var hsv = rgbToHsv(r, g, b);
					var h = mathRound(hsv.h * 360),
						s = mathRound(hsv.s * 100),
						v = mathRound(hsv.v * 100);
					return (a == 1) ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + roundA + ")";
				},
				toHsl: function() {
					var hsl = rgbToHsl(r, g, b);
					return {
						h: hsl.h * 360,
						s: hsl.s,
						l: hsl.l,
						a: a
					};
				},
				toHslString: function() {
					var hsl = rgbToHsl(r, g, b);
					var h = mathRound(hsl.h * 360),
						s = mathRound(hsl.s * 100),
						l = mathRound(hsl.l * 100);
					return (a == 1) ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + roundA + ")";
				},
				toHex: function(allow3Char) {
					return rgbToHex(r, g, b, allow3Char);
				},
				toHexString: function(allow3Char) {
					return '#' + rgbToHex(r, g, b, allow3Char);
				},
				toRgb: function() {
					return {
						r: mathRound(r),
						g: mathRound(g),
						b: mathRound(b),
						a: a
					};
				},
				toRgbString: function() {
					return (a == 1) ? "rgb(" + mathRound(r) + ", " + mathRound(g) + ", " + mathRound(b) + ")" : "rgba(" + mathRound(r) + ", " + mathRound(g) + ", " + mathRound(b) + ", " + roundA + ")";
				},
				toPercentageRgb: function() {
					return {
						r: mathRound(bound01(r, 255) * 100) + "%",
						g: mathRound(bound01(g, 255) * 100) + "%",
						b: mathRound(bound01(b, 255) * 100) + "%",
						a: a
					};
				},
				toPercentageRgbString: function() {
					return (a == 1) ? "rgb(" + mathRound(bound01(r, 255) * 100) + "%, " + mathRound(bound01(g, 255) * 100) + "%, " + mathRound(bound01(b, 255) * 100) + "%)" : "rgba(" + mathRound(bound01(r, 255) * 100) + "%, " + mathRound(bound01(g, 255) * 100) + "%, " + mathRound(bound01(b, 255) * 100) + "%, " + roundA + ")";
				},
				toName: function() {
					return hexNames[rgbToHex(r, g, b, true)] || false;
				},
				toFilter: function(secondColor) {
					var hex = rgbToHex(r, g, b);
					var secondHex = hex;
					var alphaHex = Math.round(parseFloat(a) * 255).toString(16);
					var secondAlphaHex = alphaHex;
					var gradientType = opts && opts.gradientType ? "GradientType = 1, " : "";
					if (secondColor) {
						var s = tinycolor(secondColor);
						secondHex = s.toHex();
						secondAlphaHex = Math.round(parseFloat(s.alpha) * 255).toString(16);
					}
					return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=#" + pad2(alphaHex) + hex + ",endColorstr=#" + pad2(secondAlphaHex) + secondHex + ")";
				},
				toString: function(format) {
					format = format || this.format;
					var formattedString = false;
					if (format === "rgb") {
						formattedString = this.toRgbString();
					}
					if (format === "prgb") {
						formattedString = this.toPercentageRgbString();
					}
					if (format === "hex" || format === "hex6") {
						formattedString = this.toHexString();
					}
					if (format === "hex3") {
						formattedString = this.toHexString(true);
					}
					if (format === "name") {
						formattedString = this.toName();
					}
					if (format === "hsl") {
						formattedString = this.toHslString();
					}
					if (format === "hsv") {
						formattedString = this.toHsvString();
					}
					return formattedString || this.toHexString();
				}
			};
		}
		tinycolor.fromRatio = function(color, opts) {
			if (typeof color == "object") {
				var newColor = {};
				for (var i in color) {
					if (color.hasOwnProperty(i)) {
						if (i === "a") {
							newColor[i] = color[i];
						} else {
							newColor[i] = convertToPercentage(color[i]);
						}
					}
				}
				color = newColor;
			}
			return tinycolor(color, opts);
		};

		function inputToRGB(color) {
			var rgb = {
				r: 0,
				g: 0,
				b: 0
			};
			var a = 1;
			var ok = false;
			var format = false;
			if (typeof color == "string") {
				color = stringInputToObject(color);
			}
			if (typeof color == "object") {
				if (color.hasOwnProperty("r") && color.hasOwnProperty("g") && color.hasOwnProperty("b")) {
					rgb = rgbToRgb(color.r, color.g, color.b);
					ok = true;
					format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
				} else if (color.hasOwnProperty("h") && color.hasOwnProperty("s") && color.hasOwnProperty("v")) {
					color.s = convertToPercentage(color.s);
					color.v = convertToPercentage(color.v);
					rgb = hsvToRgb(color.h, color.s, color.v);
					ok = true;
					format = "hsv";
				} else if (color.hasOwnProperty("h") && color.hasOwnProperty("s") && color.hasOwnProperty("l")) {
					color.s = convertToPercentage(color.s);
					color.l = convertToPercentage(color.l);
					rgb = hslToRgb(color.h, color.s, color.l);
					ok = true;
					format = "hsl";
				}
				if (color.hasOwnProperty("a")) {
					a = color.a;
				}
			}
			a = parseFloat(a);
			if (isNaN(a) || a < 0 || a > 1) {
				a = 1;
			}
			return {
				ok: ok,
				format: color.format || format,
				r: mathMin(255, mathMax(rgb.r, 0)),
				g: mathMin(255, mathMax(rgb.g, 0)),
				b: mathMin(255, mathMax(rgb.b, 0)),
				a: a
			};
		}

		function rgbToRgb(r, g, b) {
			return {
				r: bound01(r, 255) * 255,
				g: bound01(g, 255) * 255,
				b: bound01(b, 255) * 255
			};
		}

		function rgbToHsl(r, g, b) {
			r = bound01(r, 255);
			g = bound01(g, 255);
			b = bound01(b, 255);
			var max = mathMax(r, g, b),
				min = mathMin(r, g, b);
			var h, s, l = (max + min) / 2;
			if (max == min) {
				h = s = 0;
			} else {
				var d = max - min;
				s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
				switch (max) {
					case r:
						h = (g - b) / d + (g < b ? 6 : 0);
						break;
					case g:
						h = (b - r) / d + 2;
						break;
					case b:
						h = (r - g) / d + 4;
						break;
				}
				h /= 6;
			}
			return {
				h: h,
				s: s,
				l: l
			};
		}

		function hslToRgb(h, s, l) {
			var r, g, b;
			h = bound01(h, 360);
			s = bound01(s, 100);
			l = bound01(l, 100);

			function hue2rgb(p, q, t) {
				if (t < 0) t += 1;
				if (t > 1) t -= 1;
				if (t < 1 / 6) return p + (q - p) * 6 * t;
				if (t < 1 / 2) return q;
				if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
				return p;
			}
			if (s === 0) {
				r = g = b = l;
			} else {
				var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
				var p = 2 * l - q;
				r = hue2rgb(p, q, h + 1 / 3);
				g = hue2rgb(p, q, h);
				b = hue2rgb(p, q, h - 1 / 3);
			}
			return {
				r: r * 255,
				g: g * 255,
				b: b * 255
			};
		}

		function rgbToHsv(r, g, b) {
			r = bound01(r, 255);
			g = bound01(g, 255);
			b = bound01(b, 255);
			var max = mathMax(r, g, b),
				min = mathMin(r, g, b);
			var h, s, v = max;
			var d = max - min;
			s = max === 0 ? 0 : d / max;
			if (max == min) {
				h = 0;
			} else {
				switch (max) {
					case r:
						h = (g - b) / d + (g < b ? 6 : 0);
						break;
					case g:
						h = (b - r) / d + 2;
						break;
					case b:
						h = (r - g) / d + 4;
						break;
				}
				h /= 6;
			}
			return {
				h: h,
				s: s,
				v: v
			};
		}

		function hsvToRgb(h, s, v) {
			h = bound01(h, 360) * 6;
			s = bound01(s, 100);
			v = bound01(v, 100);
			var i = math.floor(h),
				f = h - i,
				p = v * (1 - s),
				q = v * (1 - f * s),
				t = v * (1 - (1 - f) * s),
				mod = i % 6,
				r = [v, q, p, p, t, v][mod],
				g = [t, v, v, q, p, p][mod],
				b = [p, p, t, v, v, q][mod];
			return {
				r: r * 255,
				g: g * 255,
				b: b * 255
			};
		}

		function rgbToHex(r, g, b, allow3Char) {
			var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))];
			if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
				return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
			}
			return hex.join("");
		}
		tinycolor.equals = function(color1, color2) {
			if (!color1 || !color2) {
				return false;
			}
			return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
		};
		tinycolor.random = function() {
			return tinycolor.fromRatio({
				r: mathRandom(),
				g: mathRandom(),
				b: mathRandom()
			});
		};
		tinycolor.desaturate = function(color, amount) {
			var hsl = tinycolor(color).toHsl();
			hsl.s -= ((amount || 10) / 100);
			hsl.s = clamp01(hsl.s);
			return tinycolor(hsl);
		};
		tinycolor.saturate = function(color, amount) {
			var hsl = tinycolor(color).toHsl();
			hsl.s += ((amount || 10) / 100);
			hsl.s = clamp01(hsl.s);
			return tinycolor(hsl);
		};
		tinycolor.greyscale = function(color) {
			return tinycolor.desaturate(color, 100);
		};
		tinycolor.lighten = function(color, amount) {
			var hsl = tinycolor(color).toHsl();
			hsl.l += ((amount || 10) / 100);
			hsl.l = clamp01(hsl.l);
			return tinycolor(hsl);
		};
		tinycolor.darken = function(color, amount) {
			var hsl = tinycolor(color).toHsl();
			hsl.l -= ((amount || 10) / 100);
			hsl.l = clamp01(hsl.l);
			return tinycolor(hsl);
		};
		tinycolor.complement = function(color) {
			var hsl = tinycolor(color).toHsl();
			hsl.h = (hsl.h + 180) % 360;
			return tinycolor(hsl);
		};
		tinycolor.triad = function(color) {
			var hsl = tinycolor(color).toHsl();
			var h = hsl.h;
			return [tinycolor(color), tinycolor({
				h: (h + 120) % 360,
				s: hsl.s,
				l: hsl.l
			}), tinycolor({
				h: (h + 240) % 360,
				s: hsl.s,
				l: hsl.l
			})];
		};
		tinycolor.tetrad = function(color) {
			var hsl = tinycolor(color).toHsl();
			var h = hsl.h;
			return [tinycolor(color), tinycolor({
				h: (h + 90) % 360,
				s: hsl.s,
				l: hsl.l
			}), tinycolor({
				h: (h + 180) % 360,
				s: hsl.s,
				l: hsl.l
			}), tinycolor({
				h: (h + 270) % 360,
				s: hsl.s,
				l: hsl.l
			})];
		};
		tinycolor.splitcomplement = function(color) {
			var hsl = tinycolor(color).toHsl();
			var h = hsl.h;
			return [tinycolor(color), tinycolor({
				h: (h + 72) % 360,
				s: hsl.s,
				l: hsl.l
			}), tinycolor({
				h: (h + 216) % 360,
				s: hsl.s,
				l: hsl.l
			})];
		};
		tinycolor.analogous = function(color, results, slices) {
			results = results || 6;
			slices = slices || 30;
			var hsl = tinycolor(color).toHsl();
			var part = 360 / slices;
			var ret = [tinycolor(color)];
			for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results;) {
				hsl.h = (hsl.h + part) % 360;
				ret.push(tinycolor(hsl));
			}
			return ret;
		};
		tinycolor.monochromatic = function(color, results) {
			results = results || 6;
			var hsv = tinycolor(color).toHsv();
			var h = hsv.h,
				s = hsv.s,
				v = hsv.v;
			var ret = [];
			var modification = 1 / results;
			while (results--) {
				ret.push(tinycolor({
					h: h,
					s: s,
					v: v
				}));
				v = (v + modification) % 1;
			}
			return ret;
		};
		tinycolor.readability = function(color1, color2) {
			var a = tinycolor(color1).toRgb();
			var b = tinycolor(color2).toRgb();
			var brightnessA = (a.r * 299 + a.g * 587 + a.b * 114) / 1000;
			var brightnessB = (b.r * 299 + b.g * 587 + b.b * 114) / 1000;
			var colorDiff = (Math.max(a.r, b.r) - Math.min(a.r, b.r) + Math.max(a.g, b.g) - Math.min(a.g, b.g) + Math.max(a.b, b.b) - Math.min(a.b, b.b));
			return {
				brightness: Math.abs(brightnessA - brightnessB),
				color: colorDiff
			};
		};
		tinycolor.readable = function(color1, color2) {
			var readability = tinycolor.readability(color1, color2);
			return readability.brightness > 125 && readability.color > 500;
		};
		tinycolor.mostReadable = function(baseColor, colorList) {
			var bestColor = null;
			var bestScore = 0;
			var bestIsReadable = false;
			for (var i = 0; i < colorList.length; i++) {
				var readability = tinycolor.readability(baseColor, colorList[i]);
				var readable = readability.brightness > 125 && readability.color > 500;
				var score = 3 * (readability.brightness / 125) + (readability.color / 500);
				if ((readable && !bestIsReadable) || (readable && bestIsReadable && score > bestScore) || ((!readable) && (!bestIsReadable) && score > bestScore)) {
					bestIsReadable = readable;
					bestScore = score;
					bestColor = tinycolor(colorList[i]);
				}
			}
			return bestColor;
		};
		var names = tinycolor.names = {
			aliceblue: "f0f8ff",
			antiquewhite: "faebd7",
			aqua: "0ff",
			aquamarine: "7fffd4",
			azure: "f0ffff",
			beige: "f5f5dc",
			bisque: "ffe4c4",
			black: "000",
			blanchedalmond: "ffebcd",
			blue: "00f",
			blueviolet: "8a2be2",
			brown: "a52a2a",
			burlywood: "deb887",
			burntsienna: "ea7e5d",
			cadetblue: "5f9ea0",
			chartreuse: "7fff00",
			chocolate: "d2691e",
			coral: "ff7f50",
			cornflowerblue: "6495ed",
			cornsilk: "fff8dc",
			crimson: "dc143c",
			cyan: "0ff",
			darkblue: "00008b",
			darkcyan: "008b8b",
			darkgoldenrod: "b8860b",
			darkgray: "a9a9a9",
			darkgreen: "006400",
			darkgrey: "a9a9a9",
			darkkhaki: "bdb76b",
			darkmagenta: "8b008b",
			darkolivegreen: "556b2f",
			darkorange: "ff8c00",
			darkorchid: "9932cc",
			darkred: "8b0000",
			darksalmon: "e9967a",
			darkseagreen: "8fbc8f",
			darkslateblue: "483d8b",
			darkslategray: "2f4f4f",
			darkslategrey: "2f4f4f",
			darkturquoise: "00ced1",
			darkviolet: "9400d3",
			deeppink: "ff1493",
			deepskyblue: "00bfff",
			dimgray: "696969",
			dimgrey: "696969",
			dodgerblue: "1e90ff",
			firebrick: "b22222",
			floralwhite: "fffaf0",
			forestgreen: "228b22",
			fuchsia: "f0f",
			gainsboro: "dcdcdc",
			ghostwhite: "f8f8ff",
			gold: "ffd700",
			goldenrod: "daa520",
			gray: "808080",
			green: "008000",
			greenyellow: "adff2f",
			grey: "808080",
			honeydew: "f0fff0",
			hotpink: "ff69b4",
			indianred: "cd5c5c",
			indigo: "4b0082",
			ivory: "fffff0",
			khaki: "f0e68c",
			lavender: "e6e6fa",
			lavenderblush: "fff0f5",
			lawngreen: "7cfc00",
			lemonchiffon: "fffacd",
			lightblue: "add8e6",
			lightcoral: "f08080",
			lightcyan: "e0ffff",
			lightgoldenrodyellow: "fafad2",
			lightgray: "d3d3d3",
			lightgreen: "90ee90",
			lightgrey: "d3d3d3",
			lightpink: "ffb6c1",
			lightsalmon: "ffa07a",
			lightseagreen: "20b2aa",
			lightskyblue: "87cefa",
			lightslategray: "789",
			lightslategrey: "789",
			lightsteelblue: "b0c4de",
			lightyellow: "ffffe0",
			lime: "0f0",
			limegreen: "32cd32",
			linen: "faf0e6",
			magenta: "f0f",
			maroon: "800000",
			mediumaquamarine: "66cdaa",
			mediumblue: "0000cd",
			mediumorchid: "ba55d3",
			mediumpurple: "9370db",
			mediumseagreen: "3cb371",
			mediumslateblue: "7b68ee",
			mediumspringgreen: "00fa9a",
			mediumturquoise: "48d1cc",
			mediumvioletred: "c71585",
			midnightblue: "191970",
			mintcream: "f5fffa",
			mistyrose: "ffe4e1",
			moccasin: "ffe4b5",
			navajowhite: "ffdead",
			navy: "000080",
			oldlace: "fdf5e6",
			olive: "808000",
			olivedrab: "6b8e23",
			orange: "ffa500",
			orangered: "ff4500",
			orchid: "da70d6",
			palegoldenrod: "eee8aa",
			palegreen: "98fb98",
			paleturquoise: "afeeee",
			palevioletred: "db7093",
			papayawhip: "ffefd5",
			peachpuff: "ffdab9",
			peru: "cd853f",
			pink: "ffc0cb",
			plum: "dda0dd",
			powderblue: "b0e0e6",
			purple: "800080",
			red: "f00",
			rosybrown: "bc8f8f",
			royalblue: "4169e1",
			saddlebrown: "8b4513",
			salmon: "fa8072",
			sandybrown: "f4a460",
			seagreen: "2e8b57",
			seashell: "fff5ee",
			sienna: "a0522d",
			silver: "c0c0c0",
			skyblue: "87ceeb",
			slateblue: "6a5acd",
			slategray: "708090",
			slategrey: "708090",
			snow: "fffafa",
			springgreen: "00ff7f",
			steelblue: "4682b4",
			tan: "d2b48c",
			teal: "008080",
			thistle: "d8bfd8",
			tomato: "ff6347",
			turquoise: "40e0d0",
			violet: "ee82ee",
			wheat: "f5deb3",
			white: "fff",
			whitesmoke: "f5f5f5",
			yellow: "ff0",
			yellowgreen: "9acd32"
		};
		var hexNames = tinycolor.hexNames = flip(names);

		function flip(o) {
			var flipped = {};
			for (var i in o) {
				if (o.hasOwnProperty(i)) {
					flipped[o[i]] = i;
				}
			}
			return flipped;
		}

		function bound01(n, max) {
			if (isOnePointZero(n)) {
				n = "100%";
			}
			var processPercent = isPercentage(n);
			n = mathMin(max, mathMax(0, parseFloat(n)));
			if (processPercent) {
				n = parseInt(n * max, 10) / 100;
			}
			if ((math.abs(n - max) < 0.000001)) {
				return 1;
			}
			return (n % max) / parseFloat(max);
		}

		function clamp01(val) {
			return mathMin(1, mathMax(0, val));
		}

		function parseHex(val) {
			return parseInt(val, 16);
		}

		function isOnePointZero(n) {
			return typeof n == "string" && n.indexOf('.') != -1 && parseFloat(n) === 1;
		}

		function isPercentage(n) {
			return typeof n === "string" && n.indexOf('%') != -1;
		}

		function pad2(c) {
			return c.length == 1 ? '0' + c : '' + c;
		}

		function convertToPercentage(n) {
			if (n <= 1) {
				n = (n * 100) + "%";
			}
			return n;
		}
		var matchers = (function() {
			var CSS_INTEGER = "[-\\+]?\\d+%?";
			var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
			var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";
			var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
			var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
			return {
				rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
				rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
				hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
				hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
				hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
				hex3: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
				hex6: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
			};
		})();

		function stringInputToObject(color) {
			color = color.replace(trimLeft, '').replace(trimRight, '').toLowerCase();
			var named = false;
			if (names[color]) {
				color = names[color];
				named = true;
			} else if (color == 'transparent') {
				return {
					r: 0,
					g: 0,
					b: 0,
					a: 0
				};
			}
			var match;
			if ((match = matchers.rgb.exec(color))) {
				return {
					r: match[1],
					g: match[2],
					b: match[3]
				};
			}
			if ((match = matchers.rgba.exec(color))) {
				return {
					r: match[1],
					g: match[2],
					b: match[3],
					a: match[4]
				};
			}
			if ((match = matchers.hsl.exec(color))) {
				return {
					h: match[1],
					s: match[2],
					l: match[3]
				};
			}
			if ((match = matchers.hsla.exec(color))) {
				return {
					h: match[1],
					s: match[2],
					l: match[3],
					a: match[4]
				};
			}
			if ((match = matchers.hsv.exec(color))) {
				return {
					h: match[1],
					s: match[2],
					v: match[3]
				};
			}
			if ((match = matchers.hex6.exec(color))) {
				return {
					r: parseHex(match[1]),
					g: parseHex(match[2]),
					b: parseHex(match[3]),
					format: named ? "name" : "hex"
				};
			}
			if ((match = matchers.hex3.exec(color))) {
				return {
					r: parseHex(match[1] + '' + match[1]),
					g: parseHex(match[2] + '' + match[2]),
					b: parseHex(match[3] + '' + match[3]),
					format: named ? "name" : "hex"
				};
			}
			return false;
		}
		root.tinycolor = tinycolor;
	})(this);
	$(function() {
		if ($.fn.spectrum.load) {
			$.fn.spectrum.processNativeColorInputs();
		}
	});
})(window, jQuery);